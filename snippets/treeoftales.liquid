
<script>
    document.addEventListener("DOMContentLoaded", function() {
      console.log("running this code");
      function sanitizeClassName(className) {
      // ErsÃ¤tt alla ogiltiga tecken (inklusive mellanslag) med "_"
      return className.toLowerCase().replace(/[^\w-]/g, "_");
      }

      const colorLib = {
        "white":"white",
        "black":"black",
        "light_blue":"lightblue",
        "blue":"blue",
        "army_blue":"darkblue",
        "army_green":"darkgreen",
        "green":"green",
        "dark_red":"darkred",
        "red":"red",
        "dark_purple":"darkpurple",
        "purple":"purple",
        "light_purple":"lightpurple",
        "pink":"pink",
        "orange":"orange",
        "yellow":"yellow",
        "brown":"brown",
        "light_brown":"light_brown",
        "gold":"gold",
        "silver":"silver",
        "copper":"copper",
        "neon_pink":"neon_pink",
        "neon_green":"neon_green",
        "cyan":"cyan",
        "grey":"grey",
        "dark_grey":"dark_grey",
      }
      
      const observer = new MutationObserver(() => {
        const tokenBaseSelect = document.getElementsByName("properties[Token - Base Color]")[0]
        const boxPreview = document.querySelector(".box-preview");
        const tokenPreview = document.querySelector(".token-preview");
        const selects = document.querySelectorAll("select");
        const options = document.querySelectorAll("option");
        selects.forEach((select)=> {
          select.addEventListener("change", (e) => {
            const targetValue = sanitizeClassName(e.target.value);
            const currentSelectElement = sanitizeClassName(select.name); 
            console.log(targetValue, currentSelectElement);
            switch (currentSelectElement) {
              case "properties_token_-_base_color_":
            console.log("Setting Token Base Color to: ", targetValue);
            tokenPreview.style.setProperty('background',colorLib[targetValue]);
                break;
              case "properties_token_-_accent_color_":
            console.log("Setting Token Accent Color to: ", targetValue);
            tokenPreview.style.setProperty('color',colorLib[targetValue]);
                break;
              case "properties_box_-_base_color_":
            console.log("Setting Box Base Color to: ", targetValue);
            boxPreview.style.setProperty('background',colorLib[targetValue]);
                break;
              case "properties_box_-_accent_color_":
            console.log("Setting Box Accent Color to: ", targetValue);
            boxPreview.style.setProperty('color',colorLib[targetValue]);
                break;
              default: return;
            }
          })
        });
            
            
            
          
        if (options.length > 0) {
          options.forEach(option => {
            option.classList.add("treeoftales");
            option.classList.add(sanitizeClassName(`treeoftales_${option.value}`));
          });
          observer.disconnect(); // Stop observing after finding the elements
        }
      });
      observer.observe(document.body, { childList: true, subtree: true });
    });
  </script>